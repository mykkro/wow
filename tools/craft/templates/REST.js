/* File autogenerated by craft {{datetime}} */

var _ = require("lodash")

module.exports = function(app, api) {


	// helper function to return the results
	var out = function(res, err, rr) {
    	if(!err) {
    		res.json(rr)
    	} else {
    		console.error(err)
    		res.json({ error: err })
    	}
	}

	var renderView = function(name, req, res) {
		api[name].get(req.params.id, function(err, rr) {
	    	if(!err) {
	    		if(!rr) {
	    			res.status(404)
	    			res.end('not found')
	    			return
	    		}
				var tpl = api[name].renderView(rr)
    			res.send(tpl)
    		} else {
    			console.error(err)
    			res.status(500);
    			res.end('error')
    		}
	  	})	
	}		

	var renderPreview = function(name, req, res) {
		api[name].get(req.params.id, function(err, rr) {
	    	if(!err) {
	    		if(!rr) {
	    			res.status(404)
	    			res.end('not found')
	    			return
	    		}
				var tpl = api[name].renderPreview(rr)
    			res.send(tpl)
    		} else {
    			console.error(err)
    			res.status(500);
    			res.end('error')
    		}
	  	})	
	}		

	// common functionality for all API calls
	// returned data are in JSON
	app.use("/api", function(req, res, next) {
		res.type('application/json');
		next()
	})

{{#daos}}
	// generated REST wrappers for entity '{{name}}'

	// api.{{name}}.find
	app.get('/api/{{name}}/search', function(req, res) {
	 	api.{{name}}.find(req.query, function(err, rr) {
	    	out(res, err, rr)
	  	})	
	});

	// api.{{name}}.count
	app.get('/api/{{name}}/count', function(req, res) {
	 	api.{{name}}.count(req.query, function(err, rr) {
	    	out(res, err, rr)
	  	})	
	});

	// api.{{name}}.get
	app.get('/api/{{name}}/:id', function(req, res) {
	 	api.{{name}}.get(req.params.id, function(err, rr) {
	    	out(res, err, rr)
	  	})	
	});

	// api.{{name}}.delete
	app.delete('/api/{{name}}/:id', function(req, res) {
	 	api.{{name}}.delete(req.params.id, function(err, rr) {
	    	out(res, err, rr)
	  	})	
	});

	// api.{{name}}.update
	app.put('/api/{{name}}/:id', function(req, res) {
		//api.{{name}}.update(req.params.id, req.body, function(err, rr) {
		api.{{name}}.set(req.params.id, req.body, function(err, rr) {
	    	out(res, err, rr)
	  	})
	});	
	 
	// api.{{name}}.create
	app.post('/api/{{name}}/new', function(req, res) {
		api.{{name}}.create(req.body, function(err, rr) {
	    	out(res, err, rr)
	  	})
	});	

	app.get('/thumbs/{{name}}',function(req,res) {
		res.writeHead(302, {location: "{{{thumbnail}}}" });
		res.end();
	});

	app.get('/{{name}}/:id/thumb',function(req,res) {
		var id = req.params.id
		console.log("Thumbnail: "+id)
		// default thumbnail:
		res.writeHead(302, {location: "/thumbs/{{name}}" });
		res.end();
	});

	app.get('/{{name}}/:id/view',function(req,res) {
		// return default view...		
		renderView("{{name}}", req, res)
	});

	app.get('/{{name}}/:id/preview',function(req,res) {
		// return default view...		
		renderPreview("{{name}}", req, res)
	});


	/* parameter can be string or array of strings */
	var constructQuery = function(qs) {
		var query = {}
		if(typeof(qs) == "string") {
			qs = [ qs ]
		}
		_.each(qs, function(querystr) {
			var parts = querystr.split(":")
			if(parts.length==2) {
				var key = parts[0]
				var what = parts[1]
				// some fields are treated as numbers...
				if(key == "eid" || key=="_id" || key=="ownerAdminId") {
					what = parseInt(what)
				}
				query[key] = what
			}
		})
		return query
	}

	/* parameter can be string or array of strings */
	// TODO error handling
	var constructSort = function(ss) {
		var sort = {}
		if(typeof(ss) == "string") {
			ss = [ ss ]
		}
		_.each(ss, function(sortstr) {
			var parts = sortstr.split(":")
			if(parts.length==2) {
				var key = parts[0]
				var how = parts[1] == 'asc' ? 1 : -1
				sort[key] = how
			}
		})
		return sort
	}

	// very simple search API
	// example usage:

	// curl -X GET "http://localhost:9999/api/search?skip=3&limit=6&sort=title:asc&sort=created:desc&query=title:Pokus&query=type:article"
	// curl -X GET "http://localhost:9999/api/search?&limit=6&sort=title:asc&sort=created:desc&query=type:netRadio"

	// query has these parameters:
	//   query (multiple) -> key:value
	//   sort (multiple)  -> key:asc or key:desc
	// 	 limit
	//   skip
	app.get('/api/search', function(req, res) {
		console.log("Search:")
		console.log(req.query)
		var query = req.query
		// assemble query object...
		var q = {
			limit: parseInt(query.limit || 10),
			skip: parseInt(query.skip || 0),
			query: constructQuery(query.query),
			sort: constructSort(query.sort)
		}
		api.findNodes(q).done(console.log)
		out(res, null, q)

	})

{{/daos}}
}