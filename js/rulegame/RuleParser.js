module.exports = (function() {
    /*
     * Generated by PEG.js 0.8.0.
     *
     * http://pegjs.majda.cz/
     */

    function peg$subclass(child, parent) {
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
    }

    function SyntaxError(message, expected, found, offset, line, column) {
        this.message = message;
        this.expected = expected;
        this.found = found;
        this.offset = offset;
        this.line = line;
        this.column = column;

        this.name = "SyntaxError";
    }

    peg$subclass(SyntaxError, Error);

    function parse(input) {
        var options = arguments.length > 1 ? arguments[1] : {},

            peg$FAILED = {},

            peg$startRuleFunctions = {
                start: peg$parsestart
            },
            peg$startRuleFunction = peg$parsestart,

            peg$c0 = null,
            peg$c1 = peg$FAILED,
            peg$c2 = function(cond) {
                return cond;
            },
            peg$c3 = function(cmd) {
                return cmd;
            },
            peg$c4 = {
                type: "other",
                description: "conditional"
            },
            peg$c5 = "if",
            peg$c6 = {
                type: "literal",
                value: "if",
                description: "\"if\""
            },
            peg$c7 = "(",
            peg$c8 = {
                type: "literal",
                value: "(",
                description: "\"(\""
            },
            peg$c9 = ")",
            peg$c10 = {
                type: "literal",
                value: ")",
                description: "\")\""
            },
            peg$c11 = "else",
            peg$c12 = {
                type: "literal",
                value: "else",
                description: "\"else\""
            },
            peg$c13 = function(cond, blk1, bb) {
                return {
                    "type": "if",
                    "condition": cond,
                    "then": blk1,
                    "else": (bb ? bb[3] : null)
                }
            },
            peg$c14 = "OR",
            peg$c15 = {
                type: "literal",
                value: "OR",
                description: "\"OR\""
            },
            peg$c16 = function(left, right) {
                return {
                    "type": "or",
                    "left": left,
                    "right": right
                }
            },
            peg$c17 = "AND",
            peg$c18 = {
                type: "literal",
                value: "AND",
                description: "\"AND\""
            },
            peg$c19 = function(left, right) {
                return {
                    "type": "and",
                    "left": left,
                    "right": right
                }
            },
            peg$c20 = "==",
            peg$c21 = {
                type: "literal",
                value: "==",
                description: "\"==\""
            },
            peg$c22 = function(left, right) {
                return {
                    type: "eq",
                    "left": left,
                    "right": right
                }
            },
            peg$c23 = "!=",
            peg$c24 = {
                type: "literal",
                value: "!=",
                description: "\"!=\""
            },
            peg$c25 = function(left, right) {
                return {
                    type: "neq",
                    "left": left,
                    "right": right
                }
            },
            peg$c26 = function(expr) {
                return expr;
            },
            peg$c27 = "{",
            peg$c28 = {
                type: "literal",
                value: "{",
                description: "\"{\""
            },
            peg$c29 = "}",
            peg$c30 = {
                type: "literal",
                value: "}",
                description: "\"}\""
            },
            peg$c31 = function(commands) {
                return {
                    "type": "block",
                    "items": commands
                }
            },
            peg$c32 = [],
            peg$c33 = function(cmds) {
                return cmds;
            },
            peg$c34 = ";",
            peg$c35 = {
                type: "literal",
                value: ";",
                description: "\";\""
            },
            peg$c36 = function(ass) {
                return ass;
            },
            peg$c37 = "=",
            peg$c38 = {
                type: "literal",
                value: "=",
                description: "\"=\""
            },
            peg$c39 = function(left, right) {
                return {
                    type: "set",
                    left: left,
                    right: right
                }
            },
            peg$c40 = "+",
            peg$c41 = {
                type: "literal",
                value: "+",
                description: "\"+\""
            },
            peg$c42 = function(left, right) {
                return {
                    type: "add",
                    left: left,
                    right: right
                }
            },
            peg$c43 = "-",
            peg$c44 = {
                type: "literal",
                value: "-",
                description: "\"-\""
            },
            peg$c45 = function(left, right) {
                return {
                    type: "sub",
                    left: left,
                    right: right
                }
            },
            peg$c46 = "*",
            peg$c47 = {
                type: "literal",
                value: "*",
                description: "\"*\""
            },
            peg$c48 = function(left, right) {
                return {
                    type: "mul",
                    left: left,
                    right: right
                }
            },
            peg$c49 = "/",
            peg$c50 = {
                type: "literal",
                value: "/",
                description: "\"/\""
            },
            peg$c51 = function(left, right) {
                return {
                    type: "div",
                    left: left,
                    right: right
                }
            },
            peg$c52 = function(additive) {
                return additive;
            },
            peg$c53 = "[",
            peg$c54 = {
                type: "literal",
                value: "[",
                description: "\"[\""
            },
            peg$c55 = ",",
            peg$c56 = {
                type: "literal",
                value: ",",
                description: "\",\""
            },
            peg$c57 = "]",
            peg$c58 = {
                type: "literal",
                value: "]",
                description: "\"]\""
            },
            peg$c59 = function(symbol, first, second) {
                return {
                    type: "indexedRef",
                    ref: symbol,
                    xIndex: first,
                    yIndex: second
                }
            },
            peg$c60 = ".",
            peg$c61 = {
                type: "literal",
                value: ".",
                description: "\".\""
            },
            peg$c62 = function(left, right) {
                return left + right;
            },
            peg$c63 = {
                type: "other",
                description: "symbol"
            },
            peg$c64 = /^[0-9_]/,
            peg$c65 = {
                type: "class",
                value: "[0-9_]",
                description: "[0-9_]"
            },
            peg$c66 = /^[a-zA-Z_]/,
            peg$c67 = {
                type: "class",
                value: "[a-zA-Z_]",
                description: "[a-zA-Z_]"
            },
            peg$c68 = /^[a-zA-Z0-9_]/,
            peg$c69 = {
                type: "class",
                value: "[a-zA-Z0-9_]",
                description: "[a-zA-Z0-9_]"
            },
            peg$c70 = function(letters) {
                return letters[0].join("") + letters[1] + letters[2].join("");
            },
            peg$c71 = {
                type: "other",
                description: "integer"
            },
            peg$c72 = /^[0-9]/,
            peg$c73 = {
                type: "class",
                value: "[0-9]",
                description: "[0-9]"
            },
            peg$c74 = function(digits) {
                return parseInt(digits.join(""), 10);
            },
            peg$c75 = function() {
                return "EOL";
            },
            peg$c76 = {
                type: "other",
                description: "newline"
            },
            peg$c77 = /^["\r\n"]/,
            peg$c78 = {
                type: "class",
                value: "[\"\\r\\n\"]",
                description: "[\"\\r\\n\"]"
            },
            peg$c79 = {
                type: "other",
                description: "whitespace"
            },
            peg$c80 = /^[ \t\x0B\f\xA0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]/,
            peg$c81 = {
                type: "class",
                value: "[ \\t\\x0B\\f\\xA0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]",
                description: "[ \\t\\x0B\\f\\xA0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]"
            },

            peg$currPos = 0,
            peg$reportedPos = 0,
            peg$cachedPos = 0,
            peg$cachedPosDetails = {
                line: 1,
                column: 1,
                seenCR: false
            },
            peg$maxFailPos = 0,
            peg$maxFailExpected = [],
            peg$silentFails = 0,

            peg$result;

        if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
                throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
            }

            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }

        function text() {
            return input.substring(peg$reportedPos, peg$currPos);
        }

        function offset() {
            return peg$reportedPos;
        }

        function line() {
            return peg$computePosDetails(peg$reportedPos).line;
        }

        function column() {
            return peg$computePosDetails(peg$reportedPos).column;
        }

        function expected(description) {
            throw peg$buildException(
                null, [{
                    type: "other",
                    description: description
                }],
                peg$reportedPos
            );
        }

        function error(message) {
            throw peg$buildException(message, null, peg$reportedPos);
        }

        function peg$computePosDetails(pos) {
            function advance(details, startPos, endPos) {
                var p, ch;

                for (p = startPos; p < endPos; p++) {
                    ch = input.charAt(p);
                    if (ch === "\n") {
                        if (!details.seenCR) {
                            details.line++;
                        }
                        details.column = 1;
                        details.seenCR = false;
                    } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        details.line++;
                        details.column = 1;
                        details.seenCR = true;
                    } else {
                        details.column++;
                        details.seenCR = false;
                    }
                }
            }

            if (peg$cachedPos !== pos) {
                if (peg$cachedPos > pos) {
                    peg$cachedPos = 0;
                    peg$cachedPosDetails = {
                        line: 1,
                        column: 1,
                        seenCR: false
                    };
                }
                advance(peg$cachedPosDetails, peg$cachedPos, pos);
                peg$cachedPos = pos;
            }

            return peg$cachedPosDetails;
        }

        function peg$fail(expected) {
            if (peg$currPos < peg$maxFailPos) {
                return;
            }

            if (peg$currPos > peg$maxFailPos) {
                peg$maxFailPos = peg$currPos;
                peg$maxFailExpected = [];
            }

            peg$maxFailExpected.push(expected);
        }

        function peg$buildException(message, expected, pos) {
            function cleanupExpected(expected) {
                var i = 1;

                expected.sort(function(a, b) {
                    if (a.description < b.description) {
                        return -1;
                    } else if (a.description > b.description) {
                        return 1;
                    } else {
                        return 0;
                    }
                });

                while (i < expected.length) {
                    if (expected[i - 1] === expected[i]) {
                        expected.splice(i, 1);
                    } else {
                        i++;
                    }
                }
            }

            function buildMessage(expected, found) {
                function stringEscape(s) {
                    function hex(ch) {
                        return ch.charCodeAt(0).toString(16).toUpperCase();
                    }

                    return s
                        .replace(/\\/g, '\\\\')
                        .replace(/"/g, '\\"')
                        .replace(/\x08/g, '\\b')
                        .replace(/\t/g, '\\t')
                        .replace(/\n/g, '\\n')
                        .replace(/\f/g, '\\f')
                        .replace(/\r/g, '\\r')
                        .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) {
                            return '\\x0' + hex(ch);
                        })
                        .replace(/[\x10-\x1F\x80-\xFF]/g, function(ch) {
                            return '\\x' + hex(ch);
                        })
                        .replace(/[\u0180-\u0FFF]/g, function(ch) {
                            return '\\u0' + hex(ch);
                        })
                        .replace(/[\u1080-\uFFFF]/g, function(ch) {
                            return '\\u' + hex(ch);
                        });
                }

                var expectedDescs = new Array(expected.length),
                    expectedDesc, foundDesc, i;

                for (i = 0; i < expected.length; i++) {
                    expectedDescs[i] = expected[i].description;
                }

                expectedDesc = expected.length > 1 ? expectedDescs.slice(0, -1).join(", ") + " or " + expectedDescs[expected.length - 1] : expectedDescs[0];

                foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

                return "Expected " + expectedDesc + " but " + foundDesc + " found.";
            }

            var posDetails = peg$computePosDetails(pos),
                found = pos < input.length ? input.charAt(pos) : null;

            if (expected !== null) {
                cleanupExpected(expected);
            }

            return new SyntaxError(
                message !== null ? message : buildMessage(expected, found),
                expected,
                found,
                pos,
                posDetails.line,
                posDetails.column
            );
        }

        function peg$parsestart() {
            var s0;

            s0 = peg$parserule();
            if (s0 === peg$FAILED) {
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parserule() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parsewsp();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseconditional();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsewse();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c2(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsewsp();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsecommand();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsewse();
                        if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c3(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            }

            return s0;
        }

        function peg$parseconditional() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

            peg$silentFails++;
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c5) {
                s1 = peg$c5;
                peg$currPos += 2;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c6);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsewsp();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s3 = peg$c7;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c8);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsewsp();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseexpr_or();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsewsp();
                                if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s7 = peg$c9;
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c10);
                                        }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parsewsp();
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parseblock();
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$currPos;
                                                s11 = peg$parsewsp();
                                                if (s11 !== peg$FAILED) {
                                                    if (input.substr(peg$currPos, 4) === peg$c11) {
                                                        s12 = peg$c11;
                                                        peg$currPos += 4;
                                                    } else {
                                                        s12 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c12);
                                                        }
                                                    }
                                                    if (s12 !== peg$FAILED) {
                                                        s13 = peg$parsewsp();
                                                        if (s13 !== peg$FAILED) {
                                                            s14 = peg$parseblock();
                                                            if (s14 !== peg$FAILED) {
                                                                s11 = [s11, s12, s13, s14];
                                                                s10 = s11;
                                                            } else {
                                                                peg$currPos = s10;
                                                                s10 = peg$c1;
                                                            }
                                                        } else {
                                                            peg$currPos = s10;
                                                            s10 = peg$c1;
                                                        }
                                                    } else {
                                                        peg$currPos = s10;
                                                        s10 = peg$c1;
                                                    }
                                                } else {
                                                    peg$currPos = s10;
                                                    s10 = peg$c1;
                                                }
                                                if (s10 === peg$FAILED) {
                                                    s10 = peg$c0;
                                                }
                                                if (s10 !== peg$FAILED) {
                                                    peg$reportedPos = s0;
                                                    s1 = peg$c13(s5, s9, s10);
                                                    s0 = s1;
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c1;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c1;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c1;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c4);
                }
            }

            return s0;
        }

        function peg$parseexpr_or() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parseexpr_and();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsewsp();
                if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c14) {
                        s3 = peg$c14;
                        peg$currPos += 2;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c15);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsewsp();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseexpr_or();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c16(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseexpr_and();
            }

            return s0;
        }

        function peg$parseexpr_and() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parseexpression();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsewsp();
                if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c17) {
                        s3 = peg$c17;
                        peg$currPos += 3;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c18);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsewsp();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseexpr_and();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c19(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseexpression();
            }

            return s0;
        }

        function peg$parseexpression() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parsevariable();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsewsp();
                if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c20) {
                        s3 = peg$c20;
                        peg$currPos += 2;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c21);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsewsp();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsevar_additive();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c22(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsevariable();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsewsp();
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c23) {
                            s3 = peg$c23;
                            peg$currPos += 2;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c24);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsewsp();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsevar_additive();
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c25(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s1 = peg$c7;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c8);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsewsp();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseexpression();
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsewsp();
                                if (s4 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s5 = peg$c9;
                                        peg$currPos++;
                                    } else {
                                        s5 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c10);
                                        }
                                    }
                                    if (s5 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c26(s3);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                }
            }

            return s0;
        }

        function peg$parseblock() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c27;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c28);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsewsp();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsecommands();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsewsp();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 125) {
                                s5 = peg$c29;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c30);
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c31(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }

            return s0;
        }

        function peg$parsecommands() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsecommand();
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsecommand();
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c33(s1);
            }
            s0 = s1;

            return s0;
        }

        function peg$parsecommand() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            s1 = peg$parseassignment();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsewsp();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 59) {
                        s3 = peg$c34;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c35);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsewsp();
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c36(s1);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }

            return s0;
        }

        function peg$parseassignment() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parsevariable();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsewsp();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                        s3 = peg$c37;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c38);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsewsp();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsevar_additive();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c39(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }

            return s0;
        }

        function peg$parsevar_additive() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parsevar_multiplicative();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsewsp();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 43) {
                        s3 = peg$c40;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c41);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsewsp();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsevar_additive();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c42(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsevar_multiplicative();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsewsp();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 45) {
                            s3 = peg$c43;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c44);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsewsp();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsevar_additive();
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c45(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parsevar_multiplicative();
                }
            }

            return s0;
        }

        function peg$parsevar_multiplicative() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parsevar_primary();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsewsp();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 42) {
                        s3 = peg$c46;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c47);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsewsp();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsevar_multiplicative();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c48(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsevar_primary();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsewsp();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 47) {
                            s3 = peg$c49;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c50);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsewsp();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsevar_multiplicative();
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c51(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parsevar_primary();
                }
            }

            return s0;
        }

        function peg$parsevar_primary() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$parsevariable();
            if (s0 === peg$FAILED) {
                s0 = peg$parseinteger();
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s1 = peg$c7;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c8);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsewsp();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parsevar_additive();
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsewsp();
                                if (s4 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s5 = peg$c9;
                                        peg$currPos++;
                                    } else {
                                        s5 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c10);
                                        }
                                    }
                                    if (s5 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c52(s3);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                }
            }

            return s0;
        }

        function peg$parsevariable() {
            var s0;

            s0 = peg$parsedot_symbol();
            if (s0 === peg$FAILED) {
                s0 = peg$parseindexed_var();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsesymbol();
                }
            }

            return s0;
        }

        function peg$parseindexed_var() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

            s0 = peg$currPos;
            s1 = peg$parsesymbol();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsewsp();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 91) {
                        s3 = peg$c53;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c54);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsewsp();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseadditive();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsewsp();
                                if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 44) {
                                        s7 = peg$c55;
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c56);
                                        }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parsewsp();
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parseadditive();
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parsewsp();
                                                if (s10 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 93) {
                                                        s11 = peg$c57;
                                                        peg$currPos++;
                                                    } else {
                                                        s11 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c58);
                                                        }
                                                    }
                                                    if (s11 !== peg$FAILED) {
                                                        peg$reportedPos = s0;
                                                        s1 = peg$c59(s1, s5, s9);
                                                        s0 = s1;
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c1;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c1;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c1;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c1;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }

            return s0;
        }

        function peg$parseadditive() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parsemultiplicative();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsewsp();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 43) {
                        s3 = peg$c40;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c41);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsewsp();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseadditive();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c42(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsemultiplicative();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsewsp();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 45) {
                            s3 = peg$c43;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c44);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsewsp();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseadditive();
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c45(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parsemultiplicative();
                }
            }

            return s0;
        }

        function peg$parsemultiplicative() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parseprimary();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsewsp();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 42) {
                        s3 = peg$c46;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c47);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsewsp();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsemultiplicative();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c48(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseprimary();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsewsp();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 47) {
                            s3 = peg$c49;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c50);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsewsp();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsemultiplicative();
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c51(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parseprimary();
                }
            }

            return s0;
        }

        function peg$parseprimary() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$parsedot_symbol();
            if (s0 === peg$FAILED) {
                s0 = peg$parsesymbol();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseinteger();
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s1 = peg$c7;
                            peg$currPos++;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c8);
                            }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parsewsp();
                            if (s2 !== peg$FAILED) {
                                s3 = peg$parseadditive();
                                if (s3 !== peg$FAILED) {
                                    s4 = peg$parsewsp();
                                    if (s4 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                            s5 = peg$c9;
                                            peg$currPos++;
                                        } else {
                                            s5 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c10);
                                            }
                                        }
                                        if (s5 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c52(s3);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c1;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                        }
                    }
                }
            }

            return s0;
        }

        function peg$parsedot_symbol() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parsesymbol();
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                    s2 = peg$c60;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c61);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsesymbol();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c62(s1, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c1;
            }

            return s0;
        }

        function peg$parsesymbol() {
            var s0, s1, s2, s3, s4, s5;

            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = [];
            if (peg$c64.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c65);
                }
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (peg$c64.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c65);
                    }
                }
            }
            if (s2 !== peg$FAILED) {
                if (peg$c66.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c67);
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    if (peg$c68.test(input.charAt(peg$currPos))) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c69);
                        }
                    }
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        if (peg$c68.test(input.charAt(peg$currPos))) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c69);
                            }
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s2 = [s2, s3, s4];
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$c1;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$c1;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$c1;
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c70(s1);
            }
            s0 = s1;
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c63);
                }
            }

            return s0;
        }

        function peg$parseinteger() {
            var s0, s1, s2;

            peg$silentFails++;
            s0 = peg$currPos;
            s1 = [];
            if (peg$c72.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c73);
                }
            }
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (peg$c72.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c73);
                        }
                    }
                }
            } else {
                s1 = peg$c1;
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c74(s1);
            }
            s0 = s1;
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c71);
                }
            }

            return s0;
        }

        function peg$parsewse() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsews();
            if (s2 === peg$FAILED) {
                s2 = peg$parseeol();
            }
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsews();
                if (s2 === peg$FAILED) {
                    s2 = peg$parseeol();
                }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c75();
            }
            s0 = s1;

            return s0;
        }

        function peg$parsewsp() {
            var s0, s1;

            s0 = [];
            s1 = peg$parsews();
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                s1 = peg$parsews();
            }

            return s0;
        }

        function peg$parseeol() {
            var s0, s1;

            peg$silentFails++;
            if (peg$c77.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c78);
                }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c76);
                }
            }

            return s0;
        }

        function peg$parsews() {
            var s0, s1;

            peg$silentFails++;
            if (peg$c80.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c81);
                }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c79);
                }
            }

            return s0;
        }

        peg$result = peg$startRuleFunction();

        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
        } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                peg$fail({
                    type: "end",
                    description: "end of input"
                });
            }

            throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
        }
    }

    return {
        SyntaxError: SyntaxError,
        parse: parse
    };
})();
