/* File autogenerated by craft  */

var fs = require('fs'); 
var path = require("path")
var NodeAPI = require("./NodeAPI")
var EntityAPI = require("./EntityAPI")
var _ = require("lodash")

var favoriteDAO = new (require("../dao/FavoriteDAO"))

var FavoriteAPI = NodeAPI.extend({
	constructor: function() {
		this.base("favorite", favoriteDAO, {"color":"#cfd"})
		this.eapi = new EntityAPI()
	},
	getThumbnailUri: function(data) {		
		return null
	},
	star: function(userId, entityId, cb) {
		var date = new Date()
		var self = this
		this.findOne({userId: userId, entityId: entityId}, function(err, fav) {
			if(err) {
				cb(err);
			} else {
				if(fav) {
					// item exists...
					fav.favorite = true
					self.update(fav._id, fav, cb)
				} else {
					// create it...
					// also fill in node ID and entity type
					self.eapi.getp(entityId).done(function(ent) {
						if(ent) {
							self.create({userId: userId, entityId: entityId, type:ent.type, eid:ent.eid, favorite: true}, cb)
						} else {
							// do nothing
							cb()
						}
					})
				}
			}
		})
	},
	unstar: function(userId, entityId, cb) {
		var date = new Date()
		var self = this
		this.findOne({userId: userId, entityId: entityId}, function(err, fav) {
			if(err) {
				cb(err);
			} else {
				if(fav) {
					// item exists...
					fav.favorite = false
					self.update(fav._id, fav, cb)
				} else {
					// do nothing
					cb()
				}
			}
		})
	},
	starred: function(userId, entityId, cb) {
		this.count({userId: userId, entityId: entityId, favorite: true}, function(err, count) {
			if(err) cb(err);
			else cb(null, count>0)
		})

	},
	removeUser: function(userId, cb) {
		this.deleteItems({userId: userId}, cb)
	},
	removeEntity: function(entityId, cb) {
		this.deleteItems({entityId: entityId}, cb)
	},
	getUserFavorites: function(userId, type, cb) {
		var q = {userId: userId, favorite: true}
		if(type) q.type = type
		this.find(q, cb)
	},
	getUserFavoriteIDs: function(userId, type, cb) {
		this.getUserFavorites(userId, type, function(err, favs) {
			if(err) {
				cb(err)
			} else {
				cb(null, _.map(favs, function(f) { return f.entityId }))
			}
		})
	},
	getUserEntities: function(userId, type, cb) {
		var q = {userId: userId}
		if(type) q.type = type
		this.find(q, cb)
	},
	getUserEntityIDs: function(userId, type, cb) {
		this.getUserEntities(userId, type, function(err, favs) {
			if(err) {
				cb(err)
			} else {
				cb(null, _.map(favs, function(f) { return f.entityId }))
			}
		})
	},
})

module.exports = FavoriteAPI
