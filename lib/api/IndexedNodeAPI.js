/* File autogenerated by craft  */

var fs = require('fs'); 
var path = require("path")
var NodeAPI = require("./NodeAPI")
var EntityAPI = require("./EntityAPI")
var merge = require("merge")
var _ = require("lodash")

var eapi = new EntityAPI()

var findNodeByEid = function(type, eid, next) {
	eapi.findOne({eid:eid, type:type}, next)
}

var IndexedNodeAPI = NodeAPI.extend({
	constructor: function(name, dao, opts) {
		this.base(name, dao, opts)
	},
	create: function(data, next) {	
		console.log("IndexedNodeAPI create:", data)	
		var self = this
		this.base(data, function(err, res) {
			if(err) {
				return next(err)
			} else {
				var rr = res[0]
				var ent = {
					ownerAdminId: rr.ownerAdminId,
					title: rr.title,
					description: rr.description,
					tags: rr.tags,
					type: self.name,
					eid: parseInt(rr._id)
				} 
				eapi.create(ent, function(err2, res2) {
					if(err2) {
						return next(err2)
					}
					next(null, res)
				})
			}
		})
	},
	set: function(id, data, next) {
		var self = this
		this.base(id, data, function(err, res) {
			if(err) { return next(err) }
			findNodeByEid(self.name, parseInt(id), function(err2, res2) {
				if(err2) { return next(err2) }
				else if(!res2) { return next(new Error("Node not found")) }
				var ent = merge({}, res2)
				ent.title = data.title
				ent.description = data.description
				ent.tags = data.tags
				var _id = res2._id
				console.log("IndexedNodeApi.set: ", ent)
				eapi.set(_id, ent, function(err3, res3) {
					if(err3) {
						return next(err3)
					}
					next(null, res)
				})

			})
		})
	},
	update: function(id, data, next) {
		var self = this
		this.base(id, data, function(err, res) {
			if(err) { return next(err) }
			findNodeByEid(self.name, parseInt(id), function(err2, res2) {
				if(err2) { return next(err2) }
				else if(!res2) { return next(new Error("Node not found")) }
				var ent = merge({}, res2)
				ent.title = data.title
				ent.description = data.description
				ent.tags = data.tags
				var _id = res2._id
				console.log("IndexedNodeApi.update: ", ent)
				eapi.update(_id, ent, function(err3, res3) {
					if(err3) {
						return next(err3)
					}
					next(null, res)
				})

			})
		})
	},
	deleteEntity: function(id, next) {
		console.log("IndexedNodeAPI: deleteEntity #"+ id +" of type "+this.name)
		var dt = {
			type:this.name, 
			eid:parseInt(id)
		}
		eapi.deleteItems(dt, function(err2, res2) {
			if(err2) { return next(err2) }
			next(null, res2)
		})
	},
	delete: function(id, next) {
		var self = this
		this.base(id, function(err, res) {
			if(err) { return next(err) }
			else {
				self.deleteEntity(id, next)
			}
		})
	},
	deleteItems: function(data, next) {
		var self = this
		this.find(data, function(err, res) {
			if(err) {
				next(err)
			} else {
				var ids = _.map(res, function(r) { return parseInt(r._id) })
				console.log("Nodes to be deleted: ", ids, self.name)
				// TODO delete also entities
				console.log("IndexedNodeApi.deleteItems: ", this.name, data)
				self.removeItems(data, next)
			}
		})
	},	
})

module.exports = IndexedNodeAPI