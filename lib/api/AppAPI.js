/* File autogenerated by craft  */

var fs = require('fs-extra'); 
var path = require("path")
var IndexedNodeAPI = require("./IndexedNodeAPI")
var Storage = require("../Storage")

var appDAO = new (require("../dao/AppDAO"))

var AppAPI = IndexedNodeAPI.extend({
	constructor: function() {
		this.base("app", appDAO, {"color":"#fef"})
	},
	makeEntity: function(type, node) {
		console.log("App: makeEntity", node)
		var ent = this.base(type, node)
		ent.apptype = node.apptype
		return ent
	},
	getThumbnailUri: function(data) {		
		return data.thumbnailUri
	},
	getByUuid: function(uuid, next) {
		this.findOne({importUUID:uuid}, next)
	},
	deleteByUuid: function(uuid, next) {
		var self = this
		var file = this.findOne({importUUID:uuid}, function(err, file) {
			if(err) { return next(err); }
			if(!file) { return next(); }		
			var id = parseInt(file._id)
			self.remove(id, function(err, res) {
				if(err) { return next(err) }
				self.deleteEntity(id, function(err, res) {
					if(err) { return next(err) }
					self.destroyApp(uuid, next)
				})
			})
		})
	},
	delete: function(id, next) {
		var self = this
		var file = this.findOne({_id:id}, function(err, file) {
			if(err) { return next(err); }
			if(!file) { return next(); }		
			var uuid = file.importUUID
			self.remove(id, function(err, res) {
				if(err) { return next(err) }
				self.deleteEntity(id, function(err, res) {
					if(err) { return next(err) }
					self.destroyApp(uuid, next)
				})
			})
		})
	},
	get: function(id, next) {
		// TODO add withUris wrapper
		this.base(id, next)
	},
	destroyApp: function(uuid, next) {
		console.log("Unlink app: ", uuid)
		var appDir = path.join(Storage.importDir, uuid)
		fs.removeSync(appDir)
		// maybe, delete also associated archive
		next(null, 1)
	}
})

module.exports = AppAPI
