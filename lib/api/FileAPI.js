/* File autogenerated by craft  */

var fs = require('fs-extra'); 
var path = require("path")
var IndexedNodeAPI = require("./IndexedNodeAPI")

var fileDAO = new (require("../dao/FileDAO"))

var withUrls = function(err, file, next) {
	if(err) {
		next(err)
	} else {
		var origName = file.originalFilename
		var ext =  origName.split('.').pop()
		file.url = "/uploads/" + file.uuid + "." + ext
		file.thumbnailUrl = "/uploads/thumbs/"+file.uuid+".png"
		next(null, file)
	}
}

var FileAPI = IndexedNodeAPI.extend({
	constructor: function() {
		this.base("file", fileDAO, {"color":"#eec"})
	},
	getThumbnailUri: function(data) {		
		return this.thumbFromUUID(data.uuid)
	},
	getByUuid: function(uuid, next) {
		this.findOne({uuid:uuid}, function(err, file) {
			withUrls(err, file, next)
		})
	},
	deleteByUuid: function(uuid, next) {
		var self = this
		var file = this.findOne({uuid:uuid}, function(err, file) {
			console.log("Deleting file: ", file)
			if(err) { return next(err); }
			if(!file) { return next(); }		
			var id = parseInt(file._id)
			self.remove(id, function(err, res) {
				if(err) { return next(err) }
				self.deleteEntity(id, function(err, res) {
					if(err) { return next(err) }
					self.destroyFile(file, next)
				})
			})
		})
	},
	delete: function(id, next) {
		var self = this
		var file = this.findOne({_id:id}, function(err, file) {
			console.log("Deleting file: ", file)
			if(err) { return next(err); }
			if(!file) { return next(); }		
			var uuid = file.uuid
			self.remove(id, function(err, res) {
				if(err) { return next(err) }
				self.deleteEntity(id, function(err, res) {
					if(err) { return next(err) }
					self.destroyFile(file, next)
				})
			})
		})
	},
	get: function(id, next) {
		this.base(id, function(err, file) {
			withUrls(err, file, next)
		})
	},
	destroyFile: function(file, next) {
		console.log("Unlink file: ", file.uuid)
		// delete file together with its thumbnail
		fs.removeSync(file.path)
		fs.removeSync(file.thumbnailPath)
		next(null, 1)
	}

})

module.exports = FileAPI
