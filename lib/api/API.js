/* File autogenerated by craft  */

var merge = require("merge")
var fs = require('fs'); // require the filesystem api
var path = require("path")
var mustache = require("mustache")
var Base = require("basejs")
var _ = require("lodash")
var Q = require("q")
var merge = require("merge")


var AdminAPI = require("./AdminAPI")
var AppAPI = require("./AppAPI")
var ArticleAPI = require("./ArticleAPI")
var ImageAPI = require("./ImageAPI")
var VideoAPI = require("./VideoAPI")
var VoiceAPI = require("./VoiceAPI")
var JsonAPI = require("./JsonAPI")
var NetRadioAPI = require("./NetRadioAPI")
var UserAPI = require("./UserAPI")
var YouTubeVideoAPI = require("./YouTubeVideoAPI")
var FileAPI = require("./FileAPI")
var EntityAPI = require("./EntityAPI")

var API = {
	admin: new AdminAPI(),
	app: new AppAPI(),
	article: new ArticleAPI(),
	image: new ImageAPI(),
	video: new VideoAPI(),
	voice: new VoiceAPI(),
	json: new JsonAPI(),
	netRadio: new NetRadioAPI(),
	user: new UserAPI(),
	youTubeVideo: new YouTubeVideoAPI(),
	file: new FileAPI(),
	entity: new EntityAPI(),
}

// add-on: promise-based search
// usage: API.findNodes({ ... }).done(function(data) { ... })
API.findEntities = function(d) {
	var deferred = Q.defer();
	API.entity.findWithOptions(d, function(err, res) {
		if(err) {
			return deferred.reject(err);
		}
		deferred.resolve(res);
	})
	return deferred.promise;
}

API.getNode = function(type, id) {
	var deferred = Q.defer();
	API[type].get(id, function(err, res) {
		if(err) {
			return deferred.reject(err);
		}
		deferred.resolve(merge({
			node: {
				type:type, 
				thumbnailUri: API[type].getThumbnailUri(res) || API[type].getTypeThumbnailUri(),
				previewUri: '/' + type + '/' + id + '/preview',
				viewUri: '/' + type + '/' + id + '/view'
			}
		}, res));
	})
	return deferred.promise;
}

/**
 *  Find nodes 
 *  d = { query: { ... }, skip: RECORDS_TO_SKIP, limit: RECORD_COUNT, sort: { ... } }
 */
API.findNodes = function(d) {
	var deferred = Q.defer();
	API.findEntities(d).done(function(data) {
		var promises = _.map(data, function(dd) { return API.getNode(dd.type, dd.eid) })
		Q.all(promises).done(function(nodes) {
			// combine with IDs from data
			for(var i=0; i<nodes.length; i++) {
				nodes[i].node.eid = data[i]._id
			}
			deferred.resolve(nodes);
		})
	})
	return deferred.promise;
}

// test: API.findNodes({limit:5, sort:{_id:-1}}).done(console.log)
// ...

module.exports = API