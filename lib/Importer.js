var fs = require("fs-extra")
var Storage = require("./Storage")
var Base = require("basejs")
var merge = require("merge")
var temp = require("temp")
var fs = require("fs-extra")
var unzip = require("unzip")
var path = require("path")

var Manifest = require("./Manifest")
var AppAPI = require("./api/AppAPI")

/**
 * ## Importer
 *
 * Utility class for handling app imports
 */
var Importer = Base.extend({
	defaults: {
		maxFilesize: 10000000,
		importDir: Storage.importDir
	},
	constructor: function(opts) {
		this.opts = merge({}, this.defaults, opts)
		this.api = new AppAPI()
	},
	/**
 	 * ## Importer.prototype.examineDirectory
	 * Check directory if it is an app directory. If a manifest is found, it is returned in callback function.
	 * @param {string} dir Directory to check
	 * @param {function} cb Callback function(err, result)
	 */
	examineDirectory: function(dir, cb) {
	  fs.readdir(dir, function(err, files) {
	    if(err) {
	    	cb(err)
	    } else {
		    if(files.length==1 && fs.lstatSync(path.join(dir, files[0])).isDirectory()) {
		      dir = path.join(dir, files[0])
		    }
		    var manifestPath = path.join(dir, "wow.json")
		    fs.readFile(manifestPath, function(err, data) {
		    	if(err) {
		    		// no manifest found...
		    		var scrapbookManifestPath = path.join(dir, "book.json")
				    fs.readFile(scrapbookManifestPath, function(err, data) {
				    	if(err) {
				    		// no escrapbook manifest found...
				    		cb(null, {dirPath:dir, manifest:null, manifestCreated: false})
				    	} else {
				    		// found escrabook manifest file
						    var smf = JSON.parse(data)
						    var manifest = Manifest.makeScrapbookManifest({title:smf.title, version:smf.version, author:smf.author, description:smf.description, tags: smf.tags})
						    cb(null, {dirPath:dir, manifest:manifest, manifestCreated: true})
				    	}
				    })
		    	} else {
				    var manifest = JSON.parse(data)
				    cb(null, {dirPath:dir, manifest:manifest, manifestCreated: false})
		    	}
		    })
	    }
	  })
	},
	/**
 	 * ## Importer.prototype.import
	 * Imports an application from File object (corresponding to a zip archive). If successful, a new App object is created in the database.
	 * @param {object} data File object (as returned by FileAPI)
	 * @param {function} cb Callback function(err, result)
	 */
	import: function(data, cb) {
		var archivePath = data.archivePath
		var adminId = data.ownerAdminId
		var uuid = data.archiveUUID
		var self = this
	    temp.mkdir('wowimport', function(err, dirPath) {
	      // unpack archive...
	      fs.createReadStream(archivePath)
	        .pipe(unzip.Extract({ path: dirPath }))
	        .on("close", function(err) {
	          if(err) {
	            temp.cleanup()
	          	cb(err)
	          } else {
	            // unpacked OK!
	            // let's find manifest if exists
	            self.examineDirectory(dirPath, function(err, ddd) {
	              if(!err) {
	                // we look for wow.json or book.json
	                var mf = ddd.manifest
	                if(!mf) {
	                	// create empty manifest...
	                	mf = Manifest.createEmptyManifest(uuid, data.title)
	                }
	                // write manifest file if missing in archive...
	                var manifestPath = path.join(ddd.dirPath, "wow.json")
	                if(!fs.existsSync(manifestPath)) {
	                	fs.writeFileSync(manifestPath, JSON.stringify(mf, null, 2), "utf8")
	                }
	                var previewPath = path.join(ddd.dirPath, "preview.png")
	                if(!fs.existsSync(previewPath)) {
	                	fs.copySync(path.join(__dirname, "../public/icons/scrapbook-preview.png"), previewPath)
	                }
	                var newPath = path.join(Storage.importDir, uuid)
                    fs.rename(ddd.dirPath, newPath, function(err) {
                      if(!err) {
                      	// moved to import dir successfully
		                var newdata = {
		                	apptype: mf.apptype || "wow/app",
		                	ownerAdminId: adminId,
		                	title: mf.title || "",
		                	description: mf.description || "",
		                	tags: mf.tags || [],
		                	author: mf.author || "",
		                	version: mf.version || "",
		                	importUUID: uuid,
		                	uri: '/imports/'+uuid,
		                	thumbnailUri: '/imports/'+uuid+"/preview.png",
		                	autogenerated: false
		                }
		                console.log(newdata)
		                self.api.create(newdata, cb)
                      } else {
						cb(err)
        	          }
        	      })
	           } else {
				cb(err)
	           }
	          })
	        }

	      })      
		})
	}

})

module.exports = Importer