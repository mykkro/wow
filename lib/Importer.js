var fs = require("fs-extra")
var Storage = require("./Storage")
var Base = require("basejs")
var merge = require("merge")
var temp = require("temp")
var fs = require("fs-extra")
var unzip = require("unzip")
var path = require("path")


var AppAPI = require("./api/AppAPI")

var Importer = Base.extend({
	defaults: {
		maxFilesize: 10000000,
		importDir: Storage.importDir
	},
	constructor: function(opts) {
		this.opts = merge({}, this.defaults, opts)
		this.api = new AppAPI()
	},
	createEmptyManifest: function(uuid, title) {
		return { 
			name: 'wow-contrib-imported-'+uuid,
  			apptype: 'wow/app',
  			title: title || '',
  			description: 'Imported archive.',
  			version: '',
  			author: '',
  			tags: []
  		}
	},
	examineDirectory: function(dir, cb) {
	  fs.readdir(dir, function(err, files) {
	    if(err) {
	    	cb(err)
	    } else {
		    if(files.length==1 && fs.lstatSync(path.join(dir, files[0])).isDirectory()) {
		      dir = path.join(dir, files[0])
		    }
		    var manifestPath = path.join(dir, "wow.json")
		    fs.readFile(manifestPath, function(err, data) {
		    	if(err) {
		    		// no manifest found...
		    		cb(null, {dirPath:dir, manifest:null})
		    	} else {
				    var manifest = JSON.parse(data)
				    cb(null, {dirPath:dir, manifest:manifest})
		    	}
		    })
	    }
	  })
	},
	import: function(data, cb) {
		var archivePath = data.archivePath
		var adminId = data.ownerAdminId
		var uuid = data.archiveUUID
		var self = this
	    temp.mkdir('wowimport', function(err, dirPath) {
	      // unpack archive...
	      fs.createReadStream(archivePath)
	        .pipe(unzip.Extract({ path: dirPath }))
	        .on("close", function(err) {
	          if(err) {
	            temp.cleanup()
	          	cb(err)
	          } else {
	            // unpacked OK!
	            // let's find manifest if exists
	            self.examineDirectory(dirPath, function(err, ddd) {
	              if(!err) {
	                // we look for wow.json or book.json
	                var mf = ddd.manifest
	                if(!mf) {
	                	// create empty manifest...
	                	mf = self.createEmptyManifest(uuid, data.title)
	                	// TODO save it and check if thumbnail exists...
	                }
	                console.log("OK!", mf)
	                var newPath = path.join(Storage.importDir, uuid)
                    fs.rename(ddd.dirPath, newPath, function(err) {
                      if(!err) {
                      	// moved to import dir successfully
		                var newdata = {
		                	apptype: mf.apptype || "wow/app",
		                	ownerAdminId: adminId,
		                	title: mf.title || "",
		                	description: mf.description || "",
		                	tags: mf.tags || [],
		                	author: mf.author || "",
		                	version: mf.version || "",
		                	importUUID: uuid,
		                	uri: '/imports/'+uuid,
		                	thumbnailUri: '/imports/'+uuid+"/preview.png",
		                	autogenerated: false
		                }
		                console.log(newdata)
		                self.api.create(newdata, cb)
                      } else {
						cb(err)
        	          }
        	      })
	           } else {
				cb(err)
	           }
	          })
	        }

	      })      
		})
	}

})

module.exports = Importer