// Generated by CoffeeScript 1.6.3

// Small modification to Thumbbot by Myrousz:
// -- more file types recognized (ogg/ogv, weba/webm, flv)
// -- vframes option moved in front of output file argument to prevent error

var Magician, Thumbbot, exec, googleImages;

Magician = require('magician');

googleImages = require('google-images');

exec = require('child_process').exec;

String.prototype.extensionFromFilename = function() {
  return this.substr(this.split('.')[0].length + 1, this.length).toString();
};

String.prototype.filename = function() {
  return this.replace(/^.*[\/\\]/g, '');
};

String.prototype.filenameWithoutExtension = function() {
  return this.split('.')[0].toString();
};

Thumbbot = (function() {
  function Thumbbot(srcPath, destPath) {
    this.srcPath = srcPath;
    this.destPath = destPath;
    if (!this.destPath) {
      this.destPath = this.srcPath;
    }
    this.options = {
      x: 0,
      y: 0,
      width: 200,
      height: 200,
      method: 'resize',
      position: '00:00:01',
      viewport: {
        width: 1024,
        height: 768
      }
    };
  }

  Thumbbot.prototype.set = function(options) {
    var key, _results;
    _results = [];
    for (key in options) {
      _results.push(this.options[key] = options[key]);
    }
    return _results;
  };

  Thumbbot.prototype.handleImage = function(srcPath, destPath, callback) {
    var image;
    image = new Magician(srcPath, destPath);
    if (this.options.method === 'resize') {
      image.resizeTo(this.options.width, this.options.height, function() {
        if (callback) {
          return callback();
        }
      });
    }
    if (this.options.method === 'crop') {
      return image.cropFrom(this.options.x, this.options.y, this.options.width, this.options.height, function() {
        if (callback) {
          return callback();
        }
      });
    }
  };

  // added by Myrousz
  Thumbbot.prototype.createFileThumbnail = function(ext, destPath, callback) {
    var background = __dirname + '/../public/assets/thumbs/file.png'
    var w = this.options.width
    var h = this.options.height
    var command = "convert "+background+" -resize "+w+"x"+h+" -background '#0000' -gravity center -fill '#333' -size "+w+"x"+h+" caption:'"+ext.toUpperCase()+"' -composite "+destPath
    return exec(command, callback)
  }

  Thumbbot.prototype.snap = function(callback) {
    var cleanFilename, filename,
      _this = this;
    if (/^http/.test(this.srcPath)) {
      return exec("phantomjs " + __dirname + "/sh/render.js " + this.srcPath + " " + this.options.viewport.width + " " + this.options.viewport.height + " " + this.destPath, function() {
        return _this.handleImage(_this.destPath, _this.destPath, callback);
      });
    }
    var ext = this.srcPath.extensionFromFilename()
    var self = this
    switch (ext) {
      case 'png':
      case 'jpeg':
      case 'jpg':
      case 'gif':
      case 'svg':
        return this.handleImage(this.srcPath, this.destPath, callback);
      case 'mp4':
      case 'avi':
      case '3gp':
      case 'ogv':  // added by Myrousz
      case 'webm': // added by Myrousz
      case 'flv':  // added by Myrousz --> conversion will be needed
      case 'mpg':  // added by Myrousz --> conversion will be needed
      case 'mov':  // added by Myrousz --> conversion will be needed
        //var cmd = "ffmpeg -ss " + this.options.position + " -vframes 1 -i " + this.srcPath + " -y -f image2 " + this.destPath
        /* for ffmpeg in Windows, we must move the vframes option before the output file */
        var cmd = "ffmpeg -ss " + this.options.position + " -i " + this.srcPath + " -vframes 1 -y -f image2 " + this.destPath
        return exec(cmd, function() {
          return _this.handleImage(_this.destPath, _this.destPath, callback);
        });
      case 'mp3':
      case 'aac':
      case 'wav':
      case 'ogg':  // added by Myrousz
      case 'weba': // added by Myrousz
      case 'aac':  // added by Myrousz
        filename = this.srcPath.filename();
        cleanFilename = filename.filenameWithoutExtension();
        if(this.options.originalFilename) {
          cleanFilename = this.options.originalFilename.filenameWithoutExtension();
        }
        // console.log("Searching Google Images for "+cleanFilename)
        return googleImages.search(cleanFilename, function(err, images) {
          // console.log("Got:", images)
          if (images[0]) {
            return images[0].writeTo(_this.destPath, function() {
              return _this.handleImage(_this.destPath, _this.destPath, callback);
            });
          } else {
            return self.createFileThumbnail(ext, self.destPath, callback);
          }
        });
      default:
        // just create file thumbnail...
        return this.createFileThumbnail(ext, this.destPath, callback);
    }
  };

  return Thumbbot;

})();

module.exports = Thumbbot;
